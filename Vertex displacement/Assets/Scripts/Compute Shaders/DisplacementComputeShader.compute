#pragma kernel CSMain

RWStructuredBuffer<float> displacementBuffer : register(u0);
RWStructuredBuffer<float3> displacementPoints : register(u1);
RWStructuredBuffer<int> debugBuffer : register(u2);
StructuredBuffer<float3> vertices : register(t0);

uint pointCount = 0;
uint vertexCount = 0;

bool CheckExit(uint pIndex)
{
    return pIndex > vertexCount;
}

[numthreads(256,1,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    uint lIndex = id.x;
    float3 currentVert = vertices[lIndex];
    for (uint i = 1; i < pointCount; i++)
    {
        if (length(displacementPoints[i] - currentVert) < 1.0f)
        {
            displacementBuffer[lIndex] += 0.001f * smoothstep(1, 0, length(displacementPoints[i] - currentVert));
        }
    }
}
