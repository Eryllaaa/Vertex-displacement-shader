#pragma kernel CSMain

// updated every frame
RWStructuredBuffer<float3> vertices : register(u0);
RWStructuredBuffer<float> displacements : register(u1);
RWStructuredBuffer<float> targetDisplacements : register(u3);

// initiated at start
StructuredBuffer<float3> startNormals : register(t0);
StructuredBuffer<float3> verticesStartPos : register(t1);

// sculptable surface values
const float maxDisplacement = 0;
const float sculptSpeed = 0;

// dynamic values
float3 currentPos = float3(0, 0, 0);
float3 prevPos = float3(0, 0, 0);
int currentDir = 0;
float currentRadius = 0;
float deltaTime = 0;

float GetTargetDisplacementRatio(float distance, float radius)
{
    return smoothstep(radius, 0, distance);
}

float3 ProjectOnSegment(float3 A, float3 B, float3 position)
{
    float3 AP = position - A;
    float3 AB = B - A;
    return A + dot(AP, AB) / dot(AB, AB) * AB;
}

void SmoothlyApplyDisplacement(uint index)
{
    displacements[index] = lerp(displacements[index], targetDisplacements[index], 10.0 * deltaTime);
    displacements[index] = clamp(displacements[index], -maxDisplacement, maxDisplacement);
}

[numthreads(256,1,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    uint index = id.x;

    float3 clampMin = min(prevPos, currentPos);
    float3 clampMax = max(prevPos, currentPos);
    
    float3 interpolatedPos = ProjectOnSegment(currentPos, prevPos, verticesStartPos[index]);
    interpolatedPos = clamp(interpolatedPos, clampMin, clampMax);
    
    float len = length(interpolatedPos - verticesStartPos[index]);

    if (len < currentRadius)
    {
        float distToMax = maxDisplacement - abs(targetDisplacements[index]);
        bool counterDir = (targetDisplacements[index] < 0 && currentDir > 0) || (targetDisplacements[index] > 0 && currentDir < 0);
        
        if (counterDir)
        {
            targetDisplacements[index] += sculptSpeed * (GetTargetDisplacementRatio(len, currentRadius)) * currentDir * deltaTime;
        }
        else
        {
            targetDisplacements[index] += sculptSpeed * (GetTargetDisplacementRatio(len, currentRadius)) * smoothstep(0, maxDisplacement, distToMax) * currentDir * deltaTime;
        }
        
        targetDisplacements[index] = clamp(targetDisplacements[index], -maxDisplacement, maxDisplacement);
    }
    
    SmoothlyApplyDisplacement(index);

    vertices[index] = verticesStartPos[index] + startNormals[index] * displacements[index];
}
